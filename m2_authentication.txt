To test this module locally, open a terminal at the root of the project, and run the command pytest -k module1.

To login to the Admin Dashboard when previewing your work use psdemo as the username and password.

    1
    Models: Password Column

Project Overview

In this module we'll alter the SQLAlchemy User model to include a password column. Using Flask-Migrate, we will add the new column to the database and populate the required fields. We will create a login HTML form and validate the form data in a new login route. The currently logged in user will be stored in a Flask session. The session will be cleared when the user logs out.
First Task

Open the file called models.py in the cms/admin folder. Find the User model, add a db.Column of type db.String with a size of 100. Make sure nullable is False. Name this column password.
2
Models: Check Password

Eventually we are going to need to verify the username and password of a user. There are a few functions that are part of werkzeug.security that can help us out.

Import check_password_hash from werkzeug.security below the other imports.

The best place for a password check is in the User model itself. Add a function called check_password to the User model below the password column. Since check_password is part of a class, pass two parameters, self and value.

In the body of check_password, return a call to the check_password_hash function. Pass in the new class variable password (Hint: self.), and the value.
3
Database: Initialize & Migrate

There is currently no database for the application. Let's create one and migrate the new schema that includes our new password column.

Open a terminal, command prompt, or powershell, and cd to the root folder of the project.

The Flask-Migrate extension should be installed. This extension provides several flask db commands.

    First, to initialize and configure our schema run the flask db init command.
    Second, to create a migration run the flask db migrate command.
    Third, to create the database and run the migration use flask db upgrade.
    Finally, run the custom command flask add-content to add content to the database.

4
Template: Login Form

Open the login.html file found in the templates folder of the admin blueprint.

This template contains a <form> element with several empty <div>s. Each one having a class of control. Let's add a form control to each one.

Find the label with the text, Username. In the control <div> below, add a text field that has a name of "username" and a class of "input".

Find the label with the text, Password. In the control <div> below, add a field with a type of "password", a name of "password", and a class of "input".

In the last empty <div> towards the bottom, add a submit button that has a value of "Login". Give it two classes, button and is-link.
5
Auth: Imports

The auth.py file in cms/admin will contain all authentication related code. Open it and at the top, add the following imports:

    import wraps from functools
    import session and g from flask

These will be necessary for when we create our custom authentication decorator. Note: Unless otherwise noted, the rest of the tasks in this module happen in the file auth.py.
6
Auth: Protected Decorator

To require users to login when accessing any of the admin dashboard routes (i.e. /admin), let's create a custom route decorator. Below the imports, create a function called protected. The only parameter to the function should be called route_function.

In the body of this new function, create another function called wrapped_route_function. To allow this function to accept an arbitrary number of parameters, use **kwargs as the first parameter.

For now, the only statement in the body of the wrapped_route_function should return a call to the route_function. Pass **kwargs as the first argument.
7
Auth: Redirect User

For the decorator to correctly wrap the route function, add the @wraps decorator to the wrapped_route_function function. Make sure to pass route_function to the decorator.

Next, in the body of wrapped_route_function above the return statement, add an if statement that tests whether g.user is None. In the if, return a redirect that points to 'admin.login'. Hint: you will need to use the url_for function.

At the bottom of the protected function—make sure you are not in the wrapped_route_function function—return wrapped_route_function.
8
Auth: Load User

Below the protected function, create a new function called load_user. As its first line, get the user_id from the session and store it in a variable called user_id. Decorate the function with the before_app_request decorator. Hint: Use @admin_bp as the first part of the decorator. The auth.py file is part of the admin blueprint.

As the last line of load_user, use a ternary if to assign g.user the result of User.query.get(user_id) if user_id is not None, else assign it None.
9
Auth: Login Route

Let's create a new route function called login. Add a route decorator with a URL pattern of /login. Make sure this new route allows GET and POST requests. Note: this route is part of our admin_bp blueprint.

In the body render the 'admin/login.html' template, make sure to return the results.
10
Auth: Post Request

As the first line in the login function, add an if that checks if the request method is a POST. If so, create two variables, username and password, and assign each the appropriate form data. We are going to validate some of our form data on the server side, so set a new variable called error to None.
11
Auth: Get User

Let's check if a user exists with the username that is provided. Right after you set error to None, query the User model and filter_by() the username. Make sure to take just the first() row, and assign it to a user variable.
12
Auth: Validate Form Data

We want to make sure the user name exists, and that their password is correct.

Right after the line where you get the user, use an if to see if user is None.

Add an elif with the condition not user.check_password(password).

In both the if and elif, assign error an appropriate message.
13
Auth: Store User in Session

Do the following right after but outside the last elif, and still inside the if that checks if the request is a POST. If there is no error, clear() the session. Also, store the value of user.id in the session key 'user_id'. Finally, redirect() to 'admin.content' with type set to 'page'.

Outside the error if statement, flash() the error.
14
Auth: Logout Route

Let's create a new route function called logout. Add a route decorator with a URL pattern of /logout. Note: this route is part of our admin_bp blueprint. 

In the body, clear() the session, and return a redirect() to 'admin.login'.

Switch to layout.html and find the empty <div> that has only one class, where that class is navbar-item. To this <div>, add an anchor element that says Logout and has two classes, button and is-light. In the href attribute use the url_for() function to point to the 'admin.logout' route.
15
Admin: Protect Routes

A few last things: open the cms/admin/__init__.py file and below the admin_bp variable, import auth from cms.admin. Note: This placement is important. This import needs to be below the Blueprint instance admin_bp. Some formatting tools will suggest moving it to the top of the file. You can ignore that suggestion.

Finally, protect all the routes in the admin blueprint with the @auth.protected custom decorator. This should include these routes: content, create, edit, users, and settings. You must add this decorator on the line immediately above the function definition. example: add it on the line directly above def content(type):, after its other decorators.
